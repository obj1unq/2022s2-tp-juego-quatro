import celda.*
import pieza.*
import fila.*
import quatro.*
import caracteristicas.*
import jugador.*
import wollok.game.*
import niveles.*
import direcciones.*
import selector.*
import tablero.*

describe "pruebas de esVictoria"{
	
	const pieza1 = new Pieza()
	const pieza2 = new Pieza()
	const pieza3 = new Pieza()
	const pieza4 = new Pieza()
	const pieza5 = new Pieza()
	
	const celda1 = new Celda()
	const celda2 = new Celda()
	const celda3 = new Celda()
	const celda4 = new Celda()
	
	const piezas = (1..16).map( { n=> new Pieza() } )
	const celdas = (1..16).map( { n=> new Celda() } )
		
	
	method initialize(){		
		pieza1.caracteristicas([blanca, lisa, cuadrada, alta])
		pieza2.caracteristicas([blanca, tallada, cilindrica, baja])
		pieza3.caracteristicas([blanca, tallada, cuadrada, baja])
		pieza4.caracteristicas([blanca, lisa, cilindrica, baja])
		pieza5.caracteristicas([cuadrada, lisa, blanca, alta])
		
		celda1.contenido(pieza1)
		celda2.contenido(pieza2)
		celda3.contenido(pieza3)
		celda4.contenido(pieza4)
		
		piezas.get(0).caracteristicas([blanca, lisa, cuadrada, baja])
		piezas.get(1).caracteristicas([blanca, lisa, cilindrica, baja])
		piezas.get(2).caracteristicas([blanca, lisa, cuadrada, alta])
		piezas.get(3).caracteristicas([blanca, lisa, cilindrica, alta])
		piezas.get(4).caracteristicas([blanca, tallada, cilindrica, baja])
		piezas.get(5).caracteristicas([blanca, tallada, cuadrada, baja])
		piezas.get(6).caracteristicas([blanca, tallada, cilindrica, alta])
		piezas.get(7).caracteristicas([blanca, tallada, cuadrada, alta])
		piezas.get(8).caracteristicas([negra, lisa, cuadrada, baja])
		piezas.get(9).caracteristicas([negra, lisa, cilindrica, baja])
		piezas.get(10).caracteristicas([negra, lisa, cuadrada, alta])
		piezas.get(11).caracteristicas([negra, lisa, cilindrica, alta])
		piezas.get(12).caracteristicas([negra, tallada, cilindrica, baja])
		piezas.get(13).caracteristicas([negra, tallada, cuadrada, baja])
		piezas.get(14).caracteristicas([negra, tallada, cilindrica, alta])
		piezas.get(15).caracteristicas([negra, tallada, cuadrada, alta])
		
		game.clear()
	}
	
	test "test donde hay coindencias de caracteristiscas y hay victoria" {
		const fila = new Fila(celdas=#{celda1, celda2, celda3, celda4})
		assert.that(fila.esVictoria())
	}
	
	test "test donde no hay coincidencias de caracteristicas por lo que no hay victoria"{
		const fila = new Fila(celdas=#{celda1, celda2, celda3, celda4})
		pieza4.caracteristicas([negra, lisa, cilindrica, baja])
		assert.notThat(fila.esVictoria())
	}
	
	test "test donde una celda esta vacia, por ende no hay victoria"{
		const fila = new Fila(celdas=#{celda1, celda2, celda3, celda4})
		celda4.contenido(nullPieza)
		assert.notThat(fila.esVictoria())
	}
	
	test "test donde hay 3 celdas en una fila y falla"{
		const fila = new Fila()
		assert.throwsException({ fila.celdas(#{celda1, celda2, celda3}) })
	}
	
	test "test donde hay 3 caracteristicas en una pieza y falla"{
		const pieza9 = new Pieza()
		assert.throwsException({ pieza9.caracteristicas([blanca, lisa, cuadrada]) })
	}
	
	test "test donde el juego revisa si hay fila ganadora y la fila1 lo es"{
		const fila1 = new Fila(celdas=#{celda1, celda2, celda3, celda4})
		
		const celda5 = new Celda()
		const celda6 = new Celda()
		const celda7 = new Celda()
		const fila2 = new Fila(celdas=#{celda1, celda5, celda6, celda7})
		quatro.filas(#{fila1, fila2})
		assert.that(quatro.hayFilaGanadora())
	}
	
	test "test donde el juego revisa las 2 filas y ninguna es ganadora"{
		const celda5 = new Celda()
		const celda6 = new Celda()
		const celda7 = new Celda()
		const celda8 = new Celda()
		
		const fila1 = new Fila(celdas=#{celda1, celda8, celda3, celda4})
		const fila2 = new Fila(celdas=#{celda1, celda5, celda6, celda7})
		quatro.filas(#{fila1, fila2})
		assert.notThat(quatro.hayFilaGanadora())
	}

	test "test donde probamos armar los nombres de las piezas en orden"{
		assert.equals([blanca,lisa,cuadrada, alta], pieza5.caracteristicasOrdenadas())
	}
	
	test "test donde probamos que la imagen se arme correctamente"{
		assert.equals("quatro-blanca-lisa-cuadrada-alta.png", pieza5.image())
	}
	
	test "hay empate y todas las celdas tienen una pieza" {
		
		celdas.get(0).contenido(piezas.get(11))
		celdas.get(1).contenido(piezas.get(0))
		celdas.get(2).contenido(piezas.get(8))
		celdas.get(3).contenido(piezas.get(13))
		celdas.get(4).contenido(piezas.get(5))
		celdas.get(5).contenido(piezas.get(10))
		celdas.get(6).contenido(piezas.get(4))
		celdas.get(7).contenido(piezas.get(1))
		celdas.get(8).contenido(piezas.get(15))
		celdas.get(9).contenido(piezas.get(12))
		celdas.get(10).contenido(piezas.get(6))
		celdas.get(11).contenido(piezas.get(2))
		celdas.get(12).contenido(piezas.get(3))
		celdas.get(13).contenido(piezas.get(7))
		celdas.get(14).contenido(piezas.get(14))
		celdas.get(15).contenido(piezas.get(9))
		
		jugadorBlanco.piezas(#{})
		jugadorNegro.piezas(#{})
		assert.that(quatro.hayEmpate())
	}
	
	test "hay una celda con pieza y no se puede agregar una nueva en la misma" {
		
		nivel1.iniciar()
		(1..3).forEach({n => quatro.operarConPieza()})
		assert.throwsException({quatro.operarConPieza()})
		
	}
	
	test "El jugador blanco suma una victoria luego de ganar la primer partida" {
		nivel1.iniciar()
		(1..3).forEach({n => quatro.operarConPieza()})
		selector.mover(derecha)
		// Validamos que al seleccionar las piezas se le remueven a los jugadores
		assert.equals(7,jugadorBlanco.piezas().size())
		assert.equals(7,jugadorNegro.piezas().size())
		
		quatro.operarConPieza()
		selector.mover(derecha)
		quatro.operarConPieza()
		selector.mover(derecha)
		selector.mover(derecha)
		quatro.operarConPieza()
		selector.mover(derecha)
		quatro.operarConPieza()
		(1..3).forEach({n => selector.mover(derecha)})
		quatro.operarConPieza()
		assert.equals(1,jugadorBlanco.victorias())
	}
	
	test "El selector no puede salir del tablero si asi se desea" {
		
		nivel1.iniciar()
		quatro.operarConPieza()
		selector.mover(izquierda)
		selector.mover(izquierda)
		
		assert.equals(game.at(7,7),selector.position())
	}
	
	test "Luego de seleccionar una pieza, el tablero actual es TableroQuatro" {
		
		nivel1.iniciar()
		quatro.operarConPieza()
		assert.equals(tableroQuatro, quatro.tableroActual())
		
	}
	
	test "No se puede seleccionar una pieza donde no la hay" {
		
		nivel1.iniciar()
		(1..3).forEach({n => quatro.operarConPieza()})
		selector.mover(derecha)
		quatro.operarConPieza()
		assert.throwsException({quatro.operarConPieza()})
		
	}
	
	test "Luego de que ambos jugadores realicen varios movimientos, el jugadorBlanco pasa a ser
		el jugador actual" {
		nivel1.iniciar()
		(1..2).forEach({n => quatro.operarConPieza()})
		// verifica que el que selecciona las piezas del jugador Blanco es el jugador Negro
		assert.equals(jugadorNegro, quatro.jugadorActual())
		quatro.operarConPieza()
		selector.mover(derecha)
		quatro.operarConPieza()
		// verifica que el que selecciona las piezas del jugador Negro es el jugador Rival es decir, el jugador Blanco
		assert.equals(jugadorBlanco, quatro.jugadorActual())
	}
}


